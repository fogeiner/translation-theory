<type> ::= int // done
<id> ::=  // done
<number> ::= // done

<program> ::= <funcdefs> // done

<funcdefs> ::= <funcdef> <funcdefs> | eps
<funcdef> ::=	{with body} def <type> <id> <funargs> : <statements> enddef 
| {without body} def <type> <id> <funargs> enddef
<funargs> ::= <type> <id> <funargsrest> | eps
<funargsrest> ::= , <type> <id> <funargsrest> | eps

<statements> ::= "<statement>" <statements> | eps
"<statement>" ::= <while> // done
| <for>
| <if>  // done
| <declaration>;  // done
| <assignment>;  // done
| <return>; // done
| <print>;  // done
| <read>;  // done

<for> ::= for <assignment> ; <bexpression> ; <assigment> do <statements> done

<print> ::= print <expression> // evaluates and prints expression with printf, done
<read> ::= read <id> // reads to id memory place with scanf, done

<funcall> ::= {<id> <funcallargs>}
<funcallargs> ::= <expression> <funcallargs>  <funcallargsrest> | eps
<funcallargsrest> ::= , <expression> <funcallargsrest> | eps

<return> ::= return <expression> // return 
<while> ::= while <bexpression> do <statements> done
<if> ::= if <bexpression> then <statements> fi | if <bexpression> then <statements> else <statements> <fi>

<bexpression> ::= <bdisj> <Bdisj> | <bdisj> // done
<bConj> ::= and <batom> <bConj> | and <batom> // done
<bDisj> ::= or <bdisj> <bDisj> | or <bdisj> // done
<bdisj> ::= <batom> <bConj> | <batom> // done 
<batom> ::= "<cmp>" | not <batom> | [<bexpression>] | true | false  // done

"<cmp>" ::= <cmpless> | <cmpgreater> | <cmplessorequal> | <cmpgreaterorequal> | <cmpequal> | <cmpnotequal>
<cmpless> ::= <expression> {< } <expression>
<cmpgreater> ::= <expression> { > } <expression>
<cmplessorequal> ::= <expression> { <= } <expression>
<cmpgreaterorequal> ::= <expression> {>= } <expression>
<cmpequal> ::= <expression> { == } <expression>
<cmpnotequal> ::= <expression> { != } <expression>

<expression> ::= <term> <Term> | <term> // done
<Term> ::= "± <term>" <Term> | "± <term>" // done
<term> ::= <mult> <Mult> | <mult> // done
<Mult> ::= "*%/ <atom>" <Mult> | "*%/ <atom>" //done
<mult> ::= <atom> <Mult> | <atom> // done
<atom> ::= <id> // done
| <number>  // done
| (<expression>)  // done
| "±<atom>"  // done
| <funcall> // done
"± <term>" :
<plusterm> ::= + <term> // done
<minusterm> ::= - <term> // done
"*%/ <mult>":
<multmult> ::= * <mult> // done
<modmult> ::= % <mult> // done
<divmult> ::= / <mult> // done
"± <atom>":
<negation> ::= - <atom> // done

<declaration> ::= <type> <id>   allocates another local variable on the stack i.e. -n(%ebp)   done
<assignment> ::= <id> = <expression>   evaluates expression and makes movl from tmp value of expr to memory   done
